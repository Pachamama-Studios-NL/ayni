name: Unity CI

on:
  push:
    branches:
      - main
      - staging
    tags: [ 'v*' ]
  pull_request:
    branches:
      - staging
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Run Edit/Play Mode tests
    runs-on: ubuntu-latest
    env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: unity-lib-${{ hashFiles('ProjectSettings/ProjectVersion.txt', 'Packages/manifest.json', 'Packages/packages-lock.json') }}

      - name: Read Unity version
        id: unity
        shell: bash
        run: |
          ver=$(sed -n 's/^m_EditorVersion: //p' ProjectSettings/ProjectVersion.txt)
          echo "UNITY_VERSION=$ver" >> $GITHUB_ENV

      - name: Run tests (EditMode + PlayMode)
        uses: game-ci/unity-test-runner@v4
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          testMode: all
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          # Enable code coverage (requires com.unity.testtools.codecoverage)
          # Exclude test and Unity assemblies from coverage
          customParameters: >-
            -nographics -batchmode -enableCodeCoverage
            -coverageOptions "generateHtmlReport;generateBadgeReport;path=CodeCoverage;historyPath=CodeCoverage/History;assemblyFilters:-Ayni.*Tests;-Unity.*;-UnityEditor.*;-UnityEngine.*"

      - name: Upload code coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: CodeCoverage
          path: CodeCoverage/**

  build:
    name: Build project (Windows64)
    needs: tests
    # Run build job on staging/main branches and version tags
    if: ${{ startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/staging') || startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    env:
      # Expose license to steps; steps can gate on this value
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: unity-lib-${{ hashFiles('ProjectSettings/ProjectVersion.txt', 'Packages/manifest.json', 'Packages/packages-lock.json') }}

      - name: Read Unity version
        id: unity
        shell: bash
        run: |
          ver=$(sed -n 's/^m_EditorVersion: //p' ProjectSettings/ProjectVersion.txt)
          echo "UNITY_VERSION=$ver" >> $GITHUB_ENV

      - name: Build (Windows 64)
        if: ${{ env.UNITY_LICENSE != '' }}
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ env.UNITY_LICENSE }}
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: StandaloneWindows64
          buildName: ${{ github.event.repository.name }}
          buildsPath: Builds

      - name: Upload build artifact
        if: ${{ env.UNITY_LICENSE != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: Windows64-Build-${{ github.ref_name }}
          path: Builds/**
